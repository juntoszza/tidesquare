from bs4 import BeautifulSoup
import requests
import re
import time
import json

def save_keywords_data(request):
    request_json = request.get_json(silent=True) or {}
    calls = request_json.get('calls', [])

    replies = []

    for call in calls:
        call = call[0]
        
        session = requests.Session()
        session.headers.update({
            'authority': 'search.naver.com',
            'pragma': 'no-cache',
            'cache-control': 'no-cache',
            'sec-ch-ua': '" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',
            'accept': 'application/json, text/plain, */*',
            'urlprefix': '/api',
            'sec-ch-ua-mobile': '?0',
            'logic': 'PART',
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'sec-fetch-site': 'same-origin',
            'sec-fetch-mode': 'cors',
            'sec-fetch-dest': 'empty',
            'accept-language': 'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7,zh-CN;q=0.6,zh;q=0.5',
            'cookie': 'NNB=NVV5OO7EOEVV4; NRTK=ag#all_gr#1_ma#-2_si#0_en#0_sp#0; _ga=GA1.2.1225184444.1584365530; ASID=27789460000001718f31904100000058; AD_SHP_BID=2; NDARK=Y; viewType=list; nx_ssl=2; _shopboxeventlog=false; sus_val=S3KSYAH/+vRxnJNcpDVS8eO3; spage_uid='
        })
        params = {
            'where': 'nexearch',
            'sm': 'top_hty',
            'fbm': '0',
            'ie': 'utf8',
            'query': call
        }
        response = session.get('https://search.naver.com/search.naver', params=params) 

        time.sleep(0.5)

        if response.status_code != 200:
            replies.append({
                call: ["Error", f"Request failed with status code {response.status_code}"]
            })
            continue
        
        pattern = r'{"appElementAttrs.*?"cr":"CR_OBJECT_REPLACEMENT"}'
        match = re.search(pattern, response.text, re.DOTALL)
        if not match:
            replies.append({call: None})
            continue

        try:
            json_match = json.loads(match.group(0))
        except json.JSONDecodeError:
            replies.append({call: None})
            continue

        data = json_match.get('data', {})
        props1 = data.get('props', {})
        children1 = props1.get('children', [])
        if len(children1) > 1:
            second_json = children1[1]
            props2 = second_json.get('props', {})
            children2 = props2.get('children', [])
            if len(children2) > 0:
                first_child = children2[0]
                props3 = first_child.get('props', {})
                children3 = props3.get('children', [])
                if len(children3) > 0:
                    for child in children3:
                        props4 = child.get('props', {})
                        text = props4.get('text', {})
                        content = text.get('content', '')
                        if '인기글' in content:
                            href = props4.get('href', None)
                            if href:
                                replies.append({call: href})
                                break
                    else:
                        replies.append({call: None})
                else:
                    replies.append({call: None})
            else:
                replies.append({call: None})
        else:
            replies.append({call: None})

    return json.dumps({"replies": replies}, ensure_ascii=False)
