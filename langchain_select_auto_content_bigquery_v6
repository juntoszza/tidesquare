import logging
import json
from datetime import datetime
from langchain_openai import ChatOpenAI
from langchain_core.output_parsers import JsonOutputParser
from langchain_core.prompts import PromptTemplate
from google.cloud import secretmanager
import pytz
from flask import request, jsonify
import os

def main(request):
    try:
        # Logging 설정
        logging.basicConfig(level=logging.INFO)

        # Request JSON 파싱
        data = request.get_json(silent=True)
        logging.info("Request JSON: %s", data)

        # content 필드 확인
        if not data or 'content' not in data:
            logging.error("Missing 'content' in request")
            return jsonify({"error": "Missing 'content' in request"}), 400

        content = data['content']

        #특이 문자 제거 
        content = content.replace("\\n", "").replace("\\u", "").replace("\\\\", "").replace("\\", "")     
        logging.info("Processing content")

        # Google Secret Manager를 사용하여 OpenAI API 키 가져오기
        def access_secret(project_id, secret_name):
            client = secretmanager.SecretManagerServiceClient()
            name = f"projects/{project_id}/secrets/{secret_name}/versions/latest"
            response = client.access_secret_version(request={"name": name})
            return response.payload.data.decode("UTF-8")

        os.environ['OPENAI_API_KEY'] = access_secret('267771968470','openai_apikey')

        # LLM 객체 생성
        model = ChatOpenAI(
            temperature=0.3,
            model_name="gpt-4o-mini"
        )

        # Prompt 템플릿
        template = """
        당신은 럭셔리 호텔 전문 에디터로, 매력적인 호텔 소개글을 작성하는 전문가입니다.
        럭셔리하고 세련된 톤으로 작성해주세요. 감각적인 형용사를 사용하되, 과장되지 않도록 주의해주세요.
        호텔 정보는 [content]를 참고해주세요.
        출력 양식은 [Format]양식을 지켜주세요. 특히 에디터 추천 포인트는 3개만 출력되도록 해주세요.
        출력 결과는 한글로 최대한 자연스럽게 번역해주었으면 좋겠어요.

        호텔정보 컨텐츠:
        {content}

        FORMAT:
        
            {{
            "title": "148년간 자리를 지켜 온 호텔의 품격, 만다린 오리엔탈 방콕",
            "intro": "짜오프라야 강변에 위치한 만다린 오리엔탈 방콕은 ...",
            "point": ["148년 역사를 자랑하는 방콕 최고의 호텔", "전 객실 24시간 버틀러 서비스 제공", "방콕 역사와 문화 체험이 가능한 다양한 프로그램"],
            "room": "만다린 오리엔탈 방콕의 객실은 클래식하면서도 현대적인 매력이 묻어납니다. 객실은 일반 룸과 스위트 룸으로 나뉘며 전망은 시티뷰와 짜오프라야강 리버뷰를 선택할 수 있습니다. 전 객실에 바닥부터 천장까지 어이지는 통유리가 있어 탁 트인 전망이 펼쳐집니다. 만다린 오리엔탈 방콕에서는 객실을 예약하는 모든 투숙객에게 24시간 버틀러 서비스를 제공하고 있어 최상의 편안함을 누릴 수 있어요. 스위트 룸에는 발코니가 갖추어져 있으며 앰배서더 스위트 룸과 로얄 스위트 룸의 경우 전용 엘리베이터를 통해 접근 가능해 더욱 프라이빗합니다.",
            "facility": "만다린 오리엔탈 방콕은 다양한 부대시설을 제공합니다. 1993년 오픈해 태국 최초의 호텔 스파로 이름을 알린 '오리엔탈 스파'에서 피로를 풀며 힐링해 보세요. 성인풀과 키즈풀을 갖춘 야외 수영장에는 방갈로와 선베드가 마련되어 있으며 넓은 규모를 자랑합니다. 오후 4시마다 찾아오는 무료 아이스크림 카트도 놓치지 마세요. 또한 호텔에서는 풍부한 프로그램을 제공해 방콕을 한층 더 깊고 다채롭게 체험하도록 돕습니다. 무료 모닝 요가 및 무에타이 수업이 열리며 이외에도 반나절 명소 투어, 꽃 시장 투어, 숨은 골목까지 탐험하는 자전거 투어, 왕궁으로 가는 일몰 크루즈, 연꽃잎 접기 클래스, 태국 요리 쿠킹 클래스 등에 참여할 수 있어요. 아이와 함께라면 3-12세 어린이를 위한 키즈 클럽도 이용해 보세요.",
            "dining": "호텔에는 세계적인 다이닝이 자리하고 있습니다. 미쉐린 2스타를 받은 셰프가 선보이는 프랑스 요리는 'Le Normandie'에서 맛볼 수 있어요. 조식을 포함한 올데이 다이닝 'The Verandah'에서는 인터내셔널 요리를 선보입니다. 'Sala Rim Naam'에서는 식사를 하며 태국 전통 공연을 감상해 보세요. 또한 1930년대 상하이를 모티브로 하는 중식 레스토랑 'The China House', 미쉐린 스타 셰프의 일본 가이세키 다이닝 'Kinu by Takagi', 짜오프라야강 옆의 정통 타이 퀴진 'Terrace Rim Naam' 등 풍부한 미식 탐험이 가능합니다. 'Author's Lounge'에서는 달콤한 애프터눈 티를 즐겨 보세요. 전 세계 재즈 애호가들의 성지, 1952년 문을 연 방콕 최초의 재즈 공연장 'The Bamboo Bar'에서는 수준급 바텐더들이 감각적인 칵테일을 제공합니다.",
            "location": "만다린 오리엔탈 방콕은 짜오프라야 강변 옆에 위치하는 방콕 최고의 호텔입니다. 호텔이 있는 지역은 방콕의 역사적 중심지인 차오렌크렁 지구로 풍부한 문화유산과 현대적인 감성이 조화를 이루고 있습니다. 호텔 주변에는 복합문화공간 '웨어하우스 30'부터 갤러리, 서점, 카페, 공예품 가게들이 모여 있어 활기찬 분위기를 자아냅니다. 현대적 감각과 전통이 어우러진 이 지역은 방콕의 강변 재생 프로젝트의 중심지로서 문화와 예술을 사랑하는 이들에게 이상적입니다."
            }}
        """

        output_parser = JsonOutputParser()
        prompt = PromptTemplate.from_template(template)

        # 체인 구성
        chain = prompt | model | output_parser

        # .invoke() 메서드를 사용하여 실행
        result = chain.invoke({"content": content})

        processed_data = {
            "created_at": datetime.now(pytz.timezone('Asia/Seoul')).isoformat(),
            "version": 14,
            "title": result.get('title', '콘텐츠 생성에 실패하였습니다.'),
            "intro": result.get('intro', '콘텐츠 생성에 실패하였습니다.'),
            "point": result.get('point', ['콘텐츠 생성에 실패하였습니다.']),
            "room": result.get('room', '콘텐츠 생성에 실패하였습니다.'),
            "facility": result.get('facility', '콘텐츠 생성에 실패하였습니다.'),
            "dining": result.get('dining', '콘텐츠 생성에 실패하였습니다.'),
            "location": result.get('location', '콘텐츠 생성에 실패하였습니다.')
        }

        # 생성 실패 케이스 체크
        failed_generation = (
            processed_data["title"] == '콘텐츠 생성에 실패하였습니다.' and
            processed_data["intro"] == '콘텐츠 생성에 실패하였습니다.' and
            processed_data["point"] == ['콘텐츠 생성에 실패하였습니다.'] and
            processed_data["room"] == '콘텐츠 생성에 실패하였습니다.' and
            processed_data["facility"] == '콘텐츠 생성에 실패하였습니다.' and
            processed_data["dining"] == '콘텐츠 생성에 실패하였습니다.' and
            processed_data["location"] == '콘텐츠 생성에 실패하였습니다.'
        )

        if failed_generation:
            logging.warning("Content generation failed")
            return jsonify({"error": "Content generation failed"}), 500

        # 결과 반환
        return jsonify({"message": "Content generated successfully", "data": processed_data}), 200

    except Exception as e:
        logging.exception("Error occurred during request processing")
        return jsonify({"error": str(e)}), 500
