import json
import asyncio
import aiohttp
import google.auth
from google.auth.transport.requests import Request
from google.oauth2 import id_token
from google.cloud import bigquery
from datetime import datetime
import pytz

def get_access_token(audience):
    credentials, _ = google.auth.default()
    credentials = credentials.with_scopes(['https://www.googleapis.com/auth/cloud-platform'])
    auth_request = Request()
    credentials.refresh(auth_request)
    auth_token = id_token.fetch_id_token(auth_request, audience)
    return auth_token


# lang_content_auto GCF에 request: 콘텐츠 생성에 필요한 {content} 데이터 전송 
async def send_request(session, url, token, paragon_id, keyword, content):
    data = json.dumps({
        'paragon_id': paragon_id,
        'keyword': keyword,
        'content': content
    })
    headers = {
        "Authorization": f"Bearer {token}",
        'Content-Type': 'application/json'
    }

    async with session.post(url, headers=headers, data=data, ssl=False) as response:
        response_json = await response.text()
        return json.loads(response_json)

# lang_content_auto GCF에서 보내온 결과 받아서 처리 
async def process_hotel(session, url, token, paragon_id, keyword, content):
    result = await send_request(session, url, token, paragon_id, keyword, content)
    
    if 'error' in result:
        print(f"Error processing hotel {paragon_id}: {result['error']}")
        return None

    if 'data' not in result: 
        print(f"Invalid result structure for hotel {paragon_id}")
        return None
    
    # lang_content_auto에서 반환하는 것 스키마에 맞추는 부분 
    processed_data = result['data'] 

    # point가 리스트이므로 문자열로 변환
    if isinstance(processed_data.get('point'), list):
        processed_data['point'] = "\n".join(processed_data['point'])
    
    processed_data['paragon_id'] = paragon_id 

    return processed_data

# process_hotel을 호출하는 비동기 작업(task)를 리스트로 생성후 asyncio.gather 통해 병렬 작업 실행. 
async def main(url, token, hotels_data):
    async with aiohttp.ClientSession() as session:
        tasks = [process_hotel(session, url, token, hotel['paragon_id'], hotel['keyword'], hotel['content']) 
                 for hotel in hotels_data]
        results = await asyncio.gather(*tasks)
    return [r for r in results if r is not None]

# 최종 실행 함수 
def call_gcf_api(request):
    client = bigquery.Client()

    # Fetch data from BigQuery
    query = """
    SELECT h.paragon_id as paragon_id, s.keywords as keyword, s.result as content
    FROM `select-lux.in_select.hotels` h
    JOIN `select-lux.out_select.scraping_results` s
    ON h.paragon_id = CAST(s.hotel_id AS INT64)
    # WHERE hotel_name_en IN ('Pan Pacific Singapore','Hotel New Otani Tokyo EXECUTIVE HOUSE ZEN','Montage Kapalua Bay')
    # WHERE hotel_name_en = 'Montage Kapalua Bay'
    """
    query_job = client.query(query)
    hotels_data = [dict(row) for row in query_job]

    # A 코드의 URL (실제 URL로 교체 필요)
    a_code_url = "https://asia-northeast3-select-lux.cloudfunctions.net/lang_content_auto"
    
    access_token = get_access_token(a_code_url)
    
    results = asyncio.run(main(a_code_url, access_token, hotels_data))
    
    # Save results to BigQuery
    table_id = "select-lux.out_select.contents"
    job_config = bigquery.LoadJobConfig(
        schema=[
            bigquery.SchemaField("paragon_id", "INTEGER"),
            bigquery.SchemaField("created_at", "STRING"),
            bigquery.SchemaField("version", "INTEGER"),
            bigquery.SchemaField("title", "STRING"),
            bigquery.SchemaField("intro", "STRING"),
            bigquery.SchemaField("point", "STRING"),
            bigquery.SchemaField("room", "STRING"),
            bigquery.SchemaField("facility", "STRING"),
            bigquery.SchemaField("dining", "STRING"),
            bigquery.SchemaField("location", "STRING"),
        ],
        write_disposition="WRITE_APPEND",
    )

    job = client.load_table_from_json(results, table_id, job_config=job_config)
    job.result()  # Wait for the job to complete

    return json.dumps({"message": f"Processed {len(results)} hotels and saved to BigQuery"})
